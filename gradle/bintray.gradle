/**
 * Copyright (c) 2017 Dell Inc., or its subsidiaries. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 */

import java.text.SimpleDateFormat

apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'
apply plugin: 'maven'

if (project.hasProperty("publishRepo") && publishRepo == "bintrayRelease") {
    bintray {
        if (!project.hasProperty("publishUsername") || !project.hasProperty("publishPassword")) {
            throw new GradleException("missing bintray publishing credentials")
        }
        user = publishUsername
        key = publishPassword
        pkg {
            repo = "${bintrayRepoName}"
            name = "${bintrayPackageName}"
            userOrg = "${bintrayOrgName}"
            licenses = ['Apache-2.0']
            publish = "${autoPublish}"
            vcsUrl = 'https://github.com/pravega/flink-connectors.git'
            version {
                desc = 'Flink Pravega Connector Artifacts'
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZZ")
                released = sdf.format(new Date())
                gpg {
                    sign = true
                }
            }
        }
        publications = ['bintrayPublication']
    }
}

def pomConfig = {
    name "Pravega Flink Connectors"
    url "http://pravega.io"
    description "Streaming Storage Platform"
    scm {
        url 'https://github.com/pravega/flink-connectors/tree/master'
        connection 'scm:git:git://github.com/pravega/flink-connectors.git'
        developerConnection 'scm:git:https://github.com/pravega/flink-connectors.git'
    }
    licenses {
        license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }
}

task publishToBintray (dependsOn: 'bintrayUpload') {
    publishing {
        publications {
            bintrayPublication(MavenPublication) { publication ->

                artifactId project.archivesBaseName
                project.shadow.component(publication)
                artifact sourceJar
                artifact javadocJar

                pom.withXml { xml ->

                    def root = xml.asNode()

                    def dependenciesNode = asNode().getAt("dependencies")[0]
                    project.configurations.shadowOnly.allDependencies.each { dep ->
                        if (!(dep instanceof SelfResolvingDependency)) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', dep.group)
                            dependencyNode.appendNode('artifactId', dep.name)
                            dependencyNode.appendNode('version', dep.version)
                            dependencyNode.appendNode('scope', 'provided')
                        }
                    }

                    root.children().last() + pomConfig
                }

            }
        }
    }
}