/**
 * Copyright Pravega Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:${shadowGradlePlugin}"
    }
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

apply plugin: 'java-library'
apply plugin: 'com.github.johnrengelman.shadow'

compileJava {
    options.compilerArgs.addAll([
            "-Xlint:deprecation",
            "-Xlint:divzero",
            "-Xlint:empty",
            "-Xlint:fallthrough",
            "-Xlint:finally",
            "-Xlint:overrides",
            "-Xlint:path"
//            "-Werror"
    ])
}

def getFlinkMajorMinorVersion() {
    String ver = flinkVersion
    return ver.substring(0, ver.lastIndexOf('.'))
}

archivesBaseName = "pravega-connectors-flink-" + getFlinkMajorMinorVersion() + '_' + flinkScalaVersion

shadowJar {
    // relocate pravega client's dependencies to minimize conflicts
    relocate "org.apache.commons", "io.pravega.shaded.org.apache.commons"
    relocate "com.google", "io.pravega.shaded.com.google"
    relocate "io.grpc", "io.pravega.shaded.io.grpc"
    relocate "com.squareup.okhttp", "io.pravega.shaded.com.squareup.okhttp"
    relocate "okio", "io.pravega.shaded.okio"
    relocate "io.opencensus", "io.pravega.shaded.io.opencensus"
    relocate "io.netty", "io.pravega.shaded.io.netty"
    relocate 'META-INF/native/libnetty', 'META-INF/native/libio_pravega_shaded_netty'
    relocate 'META-INF/native/netty', 'META-INF/native/io_pravega_shaded_netty'

    // the default classifier will be `all`, which need to be removed for compatibility
    archiveClassifier.set(null)

    // update package name in META-INF/services to correspond to the shaded path
    mergeServiceFiles()
}

jar {
    archiveClassifier.set('original')
    from (['LICENSE', 'NOTICE']) {
        into 'META-INF'
    }
}

java {
    // add javadocElements and sourcesElements variants to components
    withJavadocJar()
    withSourcesJar()
}

task testJar(type: ShadowJar) {
    from sourceSets.main.output, sourceSets.test.output

    archiveClassifier.set("tests")

    // shadow test runtime dependencies
    configurations = [project.configurations.testRuntimeClasspath]

    // update package name in META-INF/services to correspond to the shaded path
    mergeServiceFiles()

    // archive contains more than 65535 entries, so enable zip64 support
    zip64 = true
}

tasks.withType(Test) {
    maxParallelForks = System.properties['maxParallelForks'] ? System.properties['maxParallelForks'].toInteger() : 1
    minHeapSize = "128m"
    maxHeapSize = "1024m"
}
