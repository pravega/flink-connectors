/**
 * Copyright (c) 2017 Dell Inc., or its subsidiaries. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 */

apply plugin: 'java-library'
apply plugin: 'distribution'
apply plugin: 'com.github.johnrengelman.shadow'

compileJava {
    options.compilerArgs.addAll([
            "-Xlint:deprecation",
            "-Xlint:divzero",
            "-Xlint:empty",
            "-Xlint:fallthrough",
            "-Xlint:finally",
            "-Xlint:overrides",
            "-Xlint:path"
//            "-Werror"
    ])
}

def getFlinkMajorMinorVersion() {
    String ver = flinkVersion
    return ver.substring(0, ver.lastIndexOf('.'))
}

archivesBaseName = "pravega-connectors-flink-" + getFlinkMajorMinorVersion() + '_' + flinkScalaVersion

shadowJar {
    // relocate pravega client's dependencies to minimize conflicts
    relocate "org.apache.commons", "io.pravega.shaded.org.apache.commons"
    relocate "com.google", "io.pravega.shaded.com.google"
    relocate "io.grpc", "io.pravega.shaded.io.grpc"
    relocate "com.squareup.okhttp", "io.pravega.shaded.com.squareup.okhttp"
    relocate "okio", "io.pravega.shaded.okio"
    relocate "io.opencensus", "io.pravega.shaded.io.opencensus"
    relocate "io.netty", "io.pravega.shaded.io.netty"
    relocate 'META-INF/native/libnetty', 'META-INF/native/libio_pravega_shaded_netty'
    relocate 'META-INF/native/netty', 'META-INF/native/io_pravega_shaded_netty'

    // the default classifier will be `all`, which need to be removed for compatibility
    classifier = null

    // update package name in META-INF/services to correspond to the shaded path
    mergeServiceFiles()
}

jar {
    classifier = 'original'
    from (['LICENSE', 'NOTICE']) {
        into 'META-INF'
    }
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.java
}
artifacts { sourceJar }

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}
artifacts { javadocJar }

task testJar(type: Jar) {
    classifier = 'tests'
    from sourceSets.test.output
}
// artifacts { testRuntime testJar }

tasks.withType(Test) {
    maxParallelForks = System.properties['maxParallelForks'] ? System.properties['maxParallelForks'].toInteger() : 1
    minHeapSize = "128m"
    maxHeapSize = "1024m"
}
